affected_purls:
- pkg:maven/org.springframework/spring-core@4.3.0.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.10.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.11.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.12.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.13.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.1.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.2.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.3.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.4.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.5.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.6.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.7.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.8.RELEASE
- pkg:maven/org.springframework/spring-core@4.3.9.RELEASE
- pkg:maven/org.springframework/spring-core@5.0.0.RELEASE
- pkg:maven/org.springframework/spring-core@5.0.1.RELEASE
- pkg:maven/org.springframework/spring-core@5.0.2.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.1.0.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.1.1.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.1.2.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.1.3.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.1.4.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.2.0.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.2.1.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.2.2.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.2.3.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@5.0.0.RELEASE
aliases:
- CVE-2018-1199
- GHSA-v596-fwhq-8x48
fixed_purl:
- pkg:deb/debian/libspring-java@4.3.14-1?distro=sid
- pkg:deb/debian/libspring-java@4.3.22-4?distro=sid
- pkg:deb/debian/libspring-java@4.3.30-1?distro=sid
- pkg:deb/debian/libspring-java@4.3.30-2?distro=sid
- pkg:maven/org.springframework/spring-core@4.3.14.RELEASE
- pkg:maven/org.springframework/spring-core@5.0.3.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.1.5.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@4.2.4.RELEASE
- pkg:maven/org.springframework.security/spring-security-core@5.0.1.RELEASE
references:
- id: 140764
  reference_id: ''
  url: https://access.redhat.com/errata/RHSA-2018:2405
- id: 143974
  reference_id: ''
  url: https://lists.apache.org/thread.html/4ed49b103f64a0cecb38064f26cbf1389afc12124653da2d35166dbe@%3Cissues.activemq.apache.org%3E
- id: 143975
  reference_id: ''
  url: https://lists.apache.org/thread.html/ab825fcade0b49becfa30235b3d54f4a51bb74ea96b6c9adb5d1378c@%3Cissues.activemq.apache.org%3E
- id: 135895
  reference_id: ''
  url: https://lists.apache.org/thread.html/dcf8599b80e43a6b60482607adb76c64672772dc2d9209ae2170f369@%3Cissues.activemq.apache.org%3E
- id: 138341
  reference_id: ''
  url: https://www.oracle.com/security-alerts/cpujul2020.html
- id: 127866
  reference_id: '582181'
  url: https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=582181
- id: 143972
  reference_id: CVE-2018-1199
  url: https://nvd.nist.gov/vuln/detail/CVE-2018-1199
- id: 143976
  reference_id: CVE-2018-1199
  url: https://pivotal.io/security/cve-2018-1199
- id: 143973
  reference_id: GHSA-v596-fwhq-8x48
  url: https://github.com/advisories/GHSA-v596-fwhq-8x48
severities:
- id: 20097
  reference_id: 143973
  scoring_elements: ''
  scoring_system: cvssv3.1_qr
  value: MODERATE
summary: Spring Security (Spring Security 4.1.x before 4.1.5, 4.2.x before 4.2.4,
  and 5.0.x before 5.0.1; and Spring Framework 4.3.x before 4.3.14 and 5.0.x before
  5.0.3) does not consider URL path parameters when processing security constraints.
  By adding a URL path parameter with special encodings, an attacker may be able to
  bypass a security constraint. The root cause of this issue is a lack of clarity
  regarding the handling of path parameters in the Servlet Specification. Some Servlet
  containers include path parameters in the value returned for getPathInfo() and some
  do not. Spring Security uses the value returned by getPathInfo() as part of the
  process of mapping requests to security constraints. In this particular attack,
  different character encodings used in path parameters allows secured Spring MVC
  static resource URLs to be bypassed.
vulnerability_id: VCID-h8z2-xc9g-aaas
weaknesses: []
